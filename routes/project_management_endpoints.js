const express = require('express');
const fs = require('fs').promises;
const path = require('path');

const router = express.Router();

// Utility to get workspace path
const getWorkspacePath = (req) => req.app.locals.workspacePath;

// Supported architectures
const supportedArchitectures = ['python-basic', 'python-data'];

const defaultFiles = {
  'README.md': '# Project\n\nGenerated by API.\n',
  'requirements.txt': '',
  '.gitignore': 'logs/\n',
};

const baseFolders = ['src', 'tests', 'logs'];


router.post('/generate-archi', async (req, res) => {
  const { folder, archi_name } = req.body;

  if (!supportedArchitectures.includes(archi_name)) {
    return res.status(400).json({ success: false, error: 'Unsupported architecture name' });
  }

  const basePath = path.join(getWorkspacePath(req), folder);

  try {
    // Ensure base folder exists
    await fs.mkdir(basePath, { recursive: true });

    // Create folders
    const foldersToCreate = [...baseFolders];
    if (archi_name === 'python-data') {
      foldersToCreate.push('data');
    }

    await Promise.all(
      foldersToCreate.map(subfolder =>
        fs.mkdir(path.join(basePath, subfolder), { recursive: true })
      )
    );

    // .gitignore adjustments
    let gitignoreContent = defaultFiles['.gitignore'];
    if (archi_name === 'python-data') {
      gitignoreContent += 'data/\n';
    }

    // Create files
    const filesToCreate = {
      ...defaultFiles,
      '.gitignore': gitignoreContent,
    };

    await Promise.all(
      Object.entries(filesToCreate).map(([filename, content]) =>
        fs.writeFile(path.join(basePath, filename), content)
      )
    );

    res.json({ success: true, message: `Architecture '${archi_name}' generated in ${folder}` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: 'Failed to generate architecture' });
  }
});



module.exports = router;
